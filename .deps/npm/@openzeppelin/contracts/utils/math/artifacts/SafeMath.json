{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"g√∂rli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"linkReferences": {},
			"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220684cd2fa2a04c15d250ba8267dd106962e26f2489f2fc8079896c4a2153a2e0464736f6c634300060c0033",
			"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x4CD2FA2A04C15D250B 0xA8 0x26 PUSH30 0xD106962E26F2489F2FC8079896C4A2153A2E0464736F6C634300060C0033 ",
			"sourceMap": "398:6337:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
		},
		"deployedBytecode": {
			"immutableReferences": {},
			"linkReferences": {},
			"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220684cd2fa2a04c15d250ba8267dd106962e26f2489f2fc8079896c4a2153a2e0464736f6c634300060c0033",
			"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x4CD2FA2A04C15D250B 0xA8 0x26 PUSH30 0xD106962E26F2489F2FC8079896C4A2153A2E0464736F6C634300060C0033 ",
			"sourceMap": "398:6337:0:-:0;;;;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "17200",
				"executionCost": "97",
				"totalCost": "17297"
			},
			"internal": {
				"add(uint256,uint256)": "infinite",
				"div(uint256,uint256)": "infinite",
				"div(uint256,uint256,string memory)": "infinite",
				"mod(uint256,uint256)": "infinite",
				"mod(uint256,uint256,string memory)": "infinite",
				"mul(uint256,uint256)": "infinite",
				"sub(uint256,uint256)": "infinite",
				"sub(uint256,uint256,string memory)": "infinite",
				"tryAdd(uint256,uint256)": "infinite",
				"tryDiv(uint256,uint256)": "infinite",
				"tryMod(uint256,uint256)": "infinite",
				"tryMul(uint256,uint256)": "infinite",
				"trySub(uint256,uint256)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": []
}